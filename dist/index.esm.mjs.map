{"version":3,"file":"index.esm.mjs","sources":["../src/index.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache, gql, NormalizedCacheObject, ApolloQueryResult } from '@apollo/client/core';\n\nconst DEFAULT_URIS = {\n  arweave: \"\",\n  center: \"https://graph-api.staging.bi.social/graphql\"\n}\n\n// type DataSource = 'arweave' | 'center';\nexport type DataSource = 'center';\n\nexport interface DidEntity {\n  didName: string;\n  address: string;\n  avatar?: string;\n}\n\nexport interface DidQueryParams {\n  didName?: string;\n  address?: string;\n}\n\nexport class NetworkError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"NetworkError\";\n  }\n}\n\nexport class RateLimitError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"RateLimitError\";\n  }\n}\n\nexport class BadQueryError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"BadQueryError\";\n  }\n}\n\nexport class BadAuthError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"BadAuthError\";\n  }\n}\n\nexport class DidClient {\n  private source: DataSource;\n  private graphqlClient: ApolloClient<NormalizedCacheObject>;\n\n  constructor(params: { key: string, secret: string, uri?: string, source?: DataSource }) {\n    const { key, secret } = params\n    this.source = params.source || 'center'\n    this.graphqlClient = new ApolloClient({\n      headers: { key, secret },\n      uri: params.uri || DEFAULT_URIS[this.source],\n      cache: new InMemoryCache(),\n    })\n  }\n\n  async queryDidEntity(queryParams: DidQueryParams): Promise<DidEntity> {\n    if (!queryParams.didName && !queryParams.address)\n    {\n      throw new BadQueryError(\"Need to specify at least one query parameter: didName, address\")\n    }\n\n    const didEntity = this.source === \"center\" ? await this.queryDidCenterServer(queryParams) : await this.queryArweave(queryParams);\n    return didEntity;\n  }\n\n  private async queryDidCenterServer(variables: DidQueryParams): Promise<DidEntity> {\n    let result: ApolloQueryResult<any>\n    const query = gql`\n      query DidEntity($didName: String, $address: String) {\n        didEntity(didName: $didName, address: $address) {\n          didName\n          address\n          avatar\n        }\n      }\n    `\n    try\n    {\n      result = await this.graphqlClient.query({ query, variables });\n      const { didName, address, avatar } = result.data.didEntity;\n      return { didName, address, avatar };\n    } catch (err)\n    {\n      if (err.message === 'fetch failed')\n      {\n        throw new NetworkError(err);\n      } else if (err.message.startsWith('Too many requests, please try again'))\n      {\n        throw new RateLimitError(err);\n      } else if (err.message === 'BAD_KEY_OR_SECRET')\n      {\n        throw new BadAuthError(err);\n      } else if (err.message === 'INVALID_ARGUMENTS')\n      {\n        throw new BadQueryError(err);\n      } else\n      {\n        throw err;\n      }\n    }\n\n  }\n\n  private async queryArweave(variables: DidQueryParams): Promise<DidEntity> {\n    const query = gql``\n    const result: ApolloQueryResult<any> = await this.graphqlClient.query({ query });\n\n    const { didName, address, avatar } = result.data.didEntity\n    return { didName, address, avatar };\n  }\n}"],"names":["DEFAULT_URIS","arweave","center","NetworkError","_Error","message","_this","call","name","_inheritsLoose","_wrapNativeSuper","Error","RateLimitError","_Error2","_this2","BadQueryError","_Error3","_this3","BadAuthError","_Error4","_this4","DidClient","params","source","this","graphqlClient","key","secret","ApolloClient","headers","uri","cache","InMemoryCache","_proto","prototype","queryDidEntity","queryParams","_this5","didName","address","Promise","resolve","queryDidCenterServer","queryArweave","e","reject","variables","_this6","query","gql","_templateObject","_taggedTemplateLiteralLoose","then","_this6$graphqlClient$","_result$data$didEntit","data","didEntity","avatar","_catch","err","startsWith","_this7","_templateObject2","result","_result$data$didEntit2"],"mappings":"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"}