{"version":3,"file":"index.modern.mjs","sources":["../src/index.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache, gql, NormalizedCacheObject, ApolloQueryResult } from '@apollo/client/core';\n\nconst DEFAULT_URIS = {\n  arweave: \"\",\n  center: \"https://graph-api.bi.social/graphql\"\n}\n\n// type DataSource = 'arweave' | 'center';\nexport type DataSource = 'center';\n\nexport interface DidEntity {\n  didName: string;\n  address: string;\n  avatar?: string;\n}\n\nexport interface DidQueryParams {\n  didName?: string;\n  address?: string;\n}\n\nexport class NetworkError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"NetworkError\";\n  }\n}\n\nexport class RateLimitError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"RateLimitError\";\n  }\n}\n\nexport class BadQueryError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"BadQueryError\";\n  }\n}\n\nexport class BadAuthError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"BadAuthError\";\n  }\n}\n\nexport class DidClient {\n  private source: DataSource;\n  private graphqlClient: ApolloClient<NormalizedCacheObject>;\n\n  constructor(params: { key: string, secret: string, uri?: string, source?: DataSource }) {\n    const { key, secret } = params\n    this.source = params.source || 'center'\n    this.graphqlClient = new ApolloClient({\n      headers: { key, secret },\n      uri: params.uri || DEFAULT_URIS[this.source],\n      cache: new InMemoryCache(),\n    })\n  }\n\n  async queryDidEntity(queryParams: DidQueryParams): Promise<DidEntity> {\n    if (!queryParams.didName && !queryParams.address)\n    {\n      throw new BadQueryError(\"Need to specify at least one query parameter: didName, address\")\n    }\n\n    const didEntity = this.source === \"center\" ? await this.queryDidCenterServer(queryParams) : await this.queryArweave(queryParams);\n    return didEntity;\n  }\n\n  private async queryDidCenterServer(variables: DidQueryParams): Promise<DidEntity> {\n    let result: ApolloQueryResult<any>\n    const query = gql`\n      query DidEntity($didName: String, $address: String) {\n        didEntity(didName: $didName, address: $address) {\n          didName\n          address\n          avatar\n        }\n      }\n    `\n    try\n    {\n      result = await this.graphqlClient.query({ query, variables });\n      const { didName, address, avatar } = result.data.didEntity;\n      return { didName, address, avatar };\n    } catch (err)\n    {\n      if (err.message === 'fetch failed')\n      {\n        throw new NetworkError(err);\n      } else if (err.message.startsWith('Too many requests, please try again'))\n      {\n        throw new RateLimitError(err);\n      } else if (err.message === 'BAD_KEY_OR_SECRET')\n      {\n        throw new BadAuthError(err);\n      } else if (err.message === 'INVALID_ARGUMENTS')\n      {\n        throw new BadQueryError(err);\n      } else\n      {\n        throw err;\n      }\n    }\n\n  }\n\n  private async queryArweave(variables: DidQueryParams): Promise<DidEntity> {\n    const query = gql``\n    const result: ApolloQueryResult<any> = await this.graphqlClient.query({ query });\n\n    const { didName, address, avatar } = result.data.didEntity\n    return { didName, address, avatar };\n  }\n}"],"names":["_t","_t2","_","t","DEFAULT_URIS","arweave","center","NetworkError","Error","constructor","message","super","this","name","RateLimitError","BadQueryError","BadAuthError","DidClient","params","source","graphqlClient","key","secret","ApolloClient","headers","uri","cache","InMemoryCache","async","queryParams","didName","address","queryDidCenterServer","queryArweave","variables","result","query","gql","avatar","data","didEntity","err","startsWith"],"mappings":"+EAAA,IAAAA,EAAAC,EAAAC,EAAAC,GAAAA,EAEA,MAAMC,EAAe,CACnBC,QAAS,GACTC,OAAQ,uCAiBG,MAAAC,UAAqBC,MAChCC,YAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,cACd,EAGI,MAAOC,UAAuBN,MAClCC,YAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,gBACd,EAGI,MAAOE,UAAsBP,MACjCC,YAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,eACd,EAGW,MAAAG,UAAqBR,MAChCC,YAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,cACd,QAGWI,EAIXR,YAAYS,GAA0EN,KAH9EO,YACAC,EAAAA,KAAAA,mBAGN,EAAA,MAAMC,IAAEA,EAAGC,OAAEA,GAAWJ,EACxBN,KAAKO,OAASD,EAAOC,QAAU,SAC/BP,KAAKQ,cAAgB,IAAIG,EAAa,CACpCC,QAAS,CAAEH,MAAKC,UAChBG,IAAKP,EAAOO,KAAOrB,EAAaQ,KAAKO,QACrCO,MAAO,IAAIC,GAEf,CAEAC,qBAAqBC,GACnB,IAAKA,EAAYC,UAAYD,EAAYE,QAEvC,MAAM,IAAIhB,EAAc,kEAI1B,MADkC,WAAhBH,KAAKO,aAAgCP,KAACoB,qBAAqBH,SAAqBjB,KAAKqB,aAAaJ,EAEtH,CAEQD,2BAA2BM,GACjC,IAAIC,EACJ,MAAMC,EAAQC,EAAGrC,IAAAA,EAAAE,CAAA;;;;;;;;QASjB,IAEEiC,QAAmBvB,KAACQ,cAAcgB,MAAM,CAAEA,QAAOF,cACjD,MAAMJ,QAAEA,EAAOC,QAAEA,EAAOO,OAAEA,GAAWH,EAAOI,KAAKC,UACjD,MAAO,CAAEV,UAASC,UAASO,SAC5B,CAAC,MAAOG,GAEP,KAAoB,iBAAhBA,EAAI/B,QAEI,IAAAH,EAAakC,GACdA,EAAI/B,QAAQgC,WAAW,2CAEtB5B,EAAe2B,GACA,sBAAhBA,EAAI/B,YAEHM,EAAayB,GACE,sBAAhBA,EAAI/B,QAEP,IAAIK,EAAc0B,GAGlBA,CAET,CAEH,CAEQb,mBAAmBM,GACzB,MAAME,EAAQC,EAAGpC,IAAAA,EAAAC,MACXiC,aAA4Cf,cAAcgB,MAAM,CAAEA,WAElEN,QAAEA,EAAOC,QAAEA,EAAOO,OAAEA,GAAWH,EAAOI,KAAKC,UACjD,MAAO,CAAEV,UAASC,UAASO,SAC7B"}